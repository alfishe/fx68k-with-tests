# Instruction Test Vectors for fx68k
# Format: instruction,operands,expected_result,expected_cycles,expected_addresses

# Data movement instructions
MOVE.W D0,D1,0x1234,12,0x000000
MOVE.W (A0),D0,0x5678,16,0x001000
MOVE.W D0,(A0),0x1234,12,0x001000
MOVE.W #0x1234,D0,0x1234,8,0x000000
MOVE.W (A0)+,D0,0x5678,16,0x001000
MOVE.W D0,-(A0),0x1234,12,0x000FFE

# Arithmetic instructions
ADD.W D0,D1,0x68AC,8,0x000000
ADD.W #0x1234,D0,0x2468,12,0x000000
ADD.W (A0),D0,0x68AC,16,0x001000
SUB.W D0,D1,0x4444,8,0x000000
SUB.W #0x1234,D0,0x0000,12,0x000000
SUB.W (A0),D0,0x4444,16,0x001000

# Logical instructions
AND.W D0,D1,0x1230,8,0x000000
AND.W #0x0F0F,D0,0x0204,12,0x000000
AND.W (A0),D0,0x1230,16,0x001000
OR.W D0,D1,0x577C,8,0x000000
OR.W #0x0F0F,D0,0x1F3F,12,0x000000
OR.W (A0),D0,0x577C,16,0x001000
EOR.W D0,D1,0x454C,8,0x000000
EOR.W #0x0F0F,D0,0x1D3B,12,0x000000
EOR.W (A0),D0,0x454C,16,0x001000

# Shift and rotate instructions
ASL.W D0,0x0002,6,0x000000
ASL.W #1,D0,0x0002,6,0x000000
ASL.W (A0),D0,0x0002,18,0x001000
ASR.W D0,0xC000,6,0x000000
ASR.W #1,D0,0xC000,6,0x000000
ASR.W (A0),D0,0xC000,18,0x001000
ROL.W D0,0x0002,6,0x000000
ROL.W #1,D0,0x0002,6,0x000000
ROR.W D0,0xC000,6,0x000000
ROR.W #1,D0,0xC000,6,0x000000

# Branch instructions
BRA.S +4,0x000000,10,0x000008
BEQ.S +4,0x000000,8,0x000000
BNE.S +4,0x000000,10,0x000008
BGT.S +4,0x000000,8,0x000000
BLT.S +4,0x000000,10,0x000008
BGE.S +4,0x000000,8,0x000000
BLE.S +4,0x000000,10,0x000008

# Compare instructions
CMP.W D0,D1,0x0000,6,0x000000
CMP.W #0x1234,D0,0x0000,8,0x000000
CMP.W (A0),D0,0x0000,14,0x001000
CMPA.W D0,A0,0x0000,6,0x000000
CMPA.W #0x1234,A0,0x0000,8,0x000000

# Test instructions
TST.W D0,0x0000,4,0x000000
TST.W (A0),0x0000,12,0x001000
TAS.W D0,0x0000,4,0x000000
TAS.W (A0),0x0000,12,0x001000

# Stack operations
PUSH.W D0,0x0000,8,0x000000
POP.W D0,0x0000,12,0x000000
PUSH.W A0,0x0000,8,0x000000
POP.W A0,0x0000,12,0x000000

# Subroutine instructions
JSR (A0),0x0000,18,0x001000
RTS,0x0000,16,0x000000
JMP (A0),0x0000,8,0x001000
BSR.S +4,0x000000,18,0x000008
